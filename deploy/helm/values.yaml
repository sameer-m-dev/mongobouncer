# Default values for mongobouncer
# This is a YAML-formatted file.

# Global configuration
global:
  # Image registry for all images
  imageRegistry: ""

# Image configuration
image:
  registry: ghcr.io
  repository: sameer-m-dev/mongobouncer
  tag: "latest"
  pullPolicy: IfNotPresent
  # Optionally specify an array of imagePullSecrets
  pullSecrets: []

# Application configuration
app:
  # MongoBouncer configuration
  config:
    # =====================================
    # Network & Server Settings
    # =====================================
    listenAddr: "0.0.0.0"
    listenPort: 27017

    # =====================================
    # Logging & Debugging
    # =====================================
    logLevel: "info" # debug, info, warn, error
    logfile: "" # Empty means stdout, or specify path: "/var/log/mongobouncer.log"

    # =====================================
    # Connection Pooling & Performance
    # =====================================
    poolMode: "statement" # session, transaction, statement
    maxPoolSize: 10 # MongoDB driver's internal pool size
    minPoolSize: 1 # MongoDB driver's minimum pool size
    maxClientConn: 0 # Maximum client connections (0 = unlimited)
    maxConnIdleTime: "30s" # How long to keep idle connections
    serverSelectionTimeout: "5s" # Server selection timeout
    connectTimeout: "5s" # Connection establishment timeout
    socketTimeout: "30s" # Socket operation timeout
    heartbeatInterval: "10s" # Heartbeat frequency
    retryWrites: true # Enable retryable writes (default for replica sets)
    authEnabled: false # Enable authentication on the proxy level
    regexCredentialPassthrough: false # Use credentials passed in appName as well as the passed authSource for regex matched/wildcard match databases in downstream connections
    topology: "sharded" # The topology of the upstream MongoDB cluster. Ex: sharded, single, loadBalanced
    ping: true

    # =====================================
    # Metrics & Monitoring (Prometheus)
    # =====================================
    metrics:
      enabled: true
      listenAddr: "0.0.0.0"
      listenPort: 9090
      serviceMonitor:
        enabled: true
        interval: "30s"
        scrapeTimeout: "10s"
        path: "/metrics"
        additionalLabels: {}
        annotations: {}

    # =====================================
    # Distributed Cache Configuration (Beta Mode, use with caution)
    # =====================================
    sharedCache:
      enabled: false # Enable distributed cache for Kubernetes scaling
      listenAddr: "0.0.0.0" # Listen address for groupcache peer communication
      listenPort: 8080 # Listen port for groupcache peer communication
      cacheSizeBytes: "128Mi" # Kubernetes-style resource string (e.g., "1Gi", "512Mi", "256Mi")
      sessionExpiry: "30m" # Session expiration duration
      transactionExpiry: "2m" # Transaction expiration duration
      cursorExpiry: "24h" # Cursor expiration duration
      debug: false # Enable debug logging for cache operations
      # Manual peer configuration for non-Kubernetes environments (leave empty for auto-discovery)
      peerUrls: []
      # Example for local testing:
      # peerUrls: ["http://localhost:8081", "http://localhost:8082"]

      # Request Forwarding Configuration (automatically enabled when shared_cache is enabled)
      # Used to forward requests to the correct pod for session routing
      maxConnections: 10 # Maximum connections to other pods
      connectionTimeout: "5s" # Connection timeout to other pods
      keepAlive: true # Enable TCP keep-alive
      keepAliveInterval: "30s" # Keep-alive interval

    # =====================================
    # Network Settings
    # =====================================
    network: "tcp4" # tcp4, tcp6, unix
    unlink: false # Remove unix socket file on exit

  # Database connections - these should be configured per environment
  databases:
    # Example configurations:
    #
    # Example 1: Production MongoDB Atlas cluster (connection string)
    # production_app:
    #   connectionString: "mongodb+srv://${PROD_USER}:${PROD_PASS}@production-cluster.mongodb.net/myapp?retryWrites=true&w=majority&maxPoolSize=100&minPoolSize=10"
    #
    # Example 2: Analytics database (individual settings)
    # analytics:
    #   connectionString: "mongodb://analytics-cluster:27017/analytics"
    #   minPoolSize: 25
    #
    # Example 3: Local development database (using individual fields)
    # local_dev:
    #   host: "localhost"
    #   port: 27017
    #   dbname: "development"
    #   maxPoolSize: 10
    #   minPoolSize: 2
    #
    # Example 4: Another database using individual fields
    # test_db:
    #   host: "localhost"
    #   port: 27019
    #   dbname: "test_database"
    #   user: "testuser"
    #   password: "testpass"
    #   maxPoolSize: 15
    #   minPoolSize: 5
    #   socketTimeout: "60s"
    #
    # Example 5: Wildcard database patterns (using quotes for special characters)
    # "analytics_*":
    #   connectionString: "mongodb://analytics-cluster.mongodb.net:27017/analytics"
    #   maxPoolSize: 30
    #   poolMode: "statement"
    #
    # Catch-all wildcard: matches any database not matched above
    # "*":
    #   connectionString: "mongodb://${DEFAULT_MONGO_HOST:-localhost}:27017/default"
    #   maxPoolSize: 20
    #   maxDbConnections: 40

# Deployment configuration
replicaCount: 1

# Resource configuration
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

# Autoscaling configuration
autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Node selection
nodeSelector: {}

# Tolerations for pod assignment
tolerations: []

# Affinity for pod assignment
affinity: {}

# Pod security context
podSecurityContext:
  fsGroup: 1001
  runAsNonRoot: true
  runAsUser: 1001

# Container security context
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1001

# Service configuration
service:
  type: ClusterIP
  port: 27017
  targetPort: mongobouncer
  annotations: {}
  # External traffic policy for LoadBalancer/NodePort
  # externalTrafficPolicy: Cluster

  # Session affinity configuration for MongoDB transaction consistency
  # This ensures clients stick to the same pod for the duration of their session
  # Critical for MongoDB transactions which are pinned to specific servers/connections
  sessionAffinity:
    timeoutSeconds: 3600

# ServiceAccount configuration
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  name: ""

# RBAC configuration for distributed cache peer discovery
rbac:
  # Specifies whether RBAC resources should be created
  create: true
  # Role for pod discovery (required when sharedCache.enabled is true)
  role:
    create: true
    name: ""
  # RoleBinding for pod discovery
  roleBinding:
    create: true
    name: ""

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1
  # maxUnavailable: 50%

# Extra environment variables
extraEnvVars:
  []
  # - name: EXAMPLE_VAR
  #   value: "example_value"

# Extra environment variables from ConfigMap or Secret
extraEnvVarsConfigMap: ""
extraEnvVarsSecret: ""

# Extra volumes
extraVolumes:
  []
  # - name: extra-volume
  #   configMap:
  #     name: extra-configmap

# Extra volume mounts
extraVolumeMounts:
  []
  # - name: extra-volume
  #   mountPath: /extra

# Pod annotations
podAnnotations: {}

# Pod labels
podLabels: {}

# Lifecycle hooks
lifecycle:
  {}
  # preStop:
  #   exec:
  #     command: ["/bin/sh", "-c", "sleep 30"]

# Liveness probe configuration
livenessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 30
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5

# Readiness probe configuration
readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 30
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 3

# Startup probe configuration
startupProbe:
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 30

# Init containers
initContainers: []

# Sidecar containers
sidecars: []

# Priority class name
priorityClassName: ""

# Runtime class name
runtimeClassName: ""

# Topology spread constraints
topologySpreadConstraints: []

# Pod management policy (for StatefulSet)
podManagementPolicy: "Parallel"

# Update strategy
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

# Termination grace period
terminationGracePeriodSeconds: 60

# DNS configuration
dnsConfig: {}
dnsPolicy: "ClusterFirst"

# Host network
hostNetwork: false

# Enable/disable tests
tests:
  enabled: true
